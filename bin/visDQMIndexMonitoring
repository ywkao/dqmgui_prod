#!/bin/bash

# Bash script which checks the limits of the index for a specific DQMGUI flavor.
# If any of the size limits exceeds the ALERT_THRESHOLD, an email is sent to EMAIL_ADDRESS_TO_NOTIFY.
#
# This script works by dumping the target DQMGUI's index catalog to a temporary file and counting
# the objects stored in its several types of trees (see _tree_types below). Each tree
# has its own limit, defined in VisDQMIndex.h, which is parsed and compared with the current tree size.
#
# Example usage: visDQMIndexMonitoring FLAVOR=offline

set -e

FLAVOR=dev
INSTALLATION_DIR=/data/srv
TMP_CATALOGUE_FILE=/tmp/dqmgui_catalogue
EMAIL_ADDRESS_TO_NOTIFY=cms-dqm-coreTeam@cern.ch
# Alarm threshold value [0.0, 1.0].
# An alarm is triggered if any of the tree sizes exceed 90% of their capacity.
ALERT_THRESHOLD="0.9"

preliminary_checks() {
    if [ ! -d "$INSTALLATION_DIR" ] || [ ! -d "$INSTALLATION_DIR/state/dqmgui/$FLAVOR/ix128" ]; then
        echo "Could not find $FLAVOR DQMGUI in $INSTALLATION_DIR"
        exit 1
    fi
}

# Activate the DQMGUI environment with the required env variables
activate_env() {
    source $INSTALLATION_DIR/current/apps/dqmgui/128/etc/profile.d/env.sh
}

# Sources the env.sh file needed for activating the DQMGUI environment,
# then dumps the Index' catalogue to the TMP_CATALOGUE_FILE
dump_catalogue() {
    visDQMIndex dump $INSTALLATION_DIR/state/dqmgui/$FLAVOR/ix128 catalogue >"${TMP_CATALOGUE_FILE}_${FLAVOR}"
}

get_index_capacity() {
    for tree_name_and_size in $(visDQMIndex get_capacity); do
        tree_name=$(echo $tree_name_and_size | cut -d',' -f1)
        tree_limit=$(echo $tree_name_and_size | cut -d',' -f2)
        tree_limits[$tree_name]=$tree_limit
    done
}

check_index_limits_and_send_email() {
    msg=
    # Run over all tree types
    for tree_name in "${!tree_limits[@]}"; do
        tree_current_size=$(grep "$tree_name" "${TMP_CATALOGUE_FILE}_${FLAVOR}" | wc -l)
        percent_full=$(bc -l <<<"($tree_current_size/${tree_limits[$tree_name]})*100")
        echo "Found $tree_current_size $tree_name in the catalogue. Limit is ${tree_limits[$tree_name]} ($(printf '%.2f' $percent_full)% full)"
        # Check if alarm threshold is exceeded
        threshold=$(printf '%.0f' $(bc <<<"$ALERT_THRESHOLD * ${tree_limits[$tree_name]}"))
        if [ $tree_current_size -gt $threshold ]; then
            msg=$(printf "%s" "${msg}WARNING: DQMGUI's index tree $tree_name has $tree_current_size entries out of the maximum ${tree_limit} ($(printf '%.2f' $percent_full)%% full)\n")
        fi
    done
    if [ -n "$msg" ]; then
        echo "Sending email to $EMAIL_ADDRESS_TO_NOTIFY"
        printf "$msg" | mail -s "visDQMIndexMonitoring on $(hostname) (${FLAVOR})" "$EMAIL_ADDRESS_TO_NOTIFY"
    fi
}

cleanup() {
    rm -rf "${TMP_CATALOGUE_FILE}_${FLAVOR}"
}

### Main script
declare -A tree_limits=()
declare -a steps=(
    preliminary_checks
    activate_env
    get_index_capacity
    dump_catalogue
    check_index_limits_and_send_email
    cleanup
)

# Create dynamic flags to selectively disable/enable steps of the installation
# Those flags are named "do_" with the name of the function, e.g. "do_dump_catalogue" for
# the "dump_catalogue".
# We set those flags to 1 by default.
for step in "${steps[@]}"; do
    eval "do_${step}=1"
done

# Parse command line arguments -- use <key>=<value> to override the flags mentioned above.
# e.g. do_dump_catalogue=0
for ARGUMENT in "$@"; do
    KEY=$(echo "$ARGUMENT" | cut -f1 -d=)
    KEY_LENGTH=${#KEY}
    VALUE="${ARGUMENT:$KEY_LENGTH+1}"
    eval "$KEY=$VALUE"
done

# For each step, check if the appropriate flag is enabled.
for step in "${steps[@]}"; do

    installation_step_flag_name=do_$step
    if [ "${!installation_step_flag_name}" -ne 0 ]; then
        echo "Step: $step"
        # Run the actual function
        eval "$step"
    else
        echo "Skipping step: $step"
    fi
done
echo "Done!"
